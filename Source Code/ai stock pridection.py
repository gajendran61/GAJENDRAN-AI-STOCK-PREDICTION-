# -*- coding: utf-8 -*-
"""AI Stock Pr

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YH3zVRZTCBsbBiSu0KjqCi0_1ojcsyBm
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout

data = """Date,Open,High,Low,Close,Volume
2024-04-01,150.0,152.5,149.8,151.0,1000000
2024-04-02,151.0,153.0,150.5,152.2,1100000
2024-04-03,152.2,154.1,151.9,153.8,1200000
2024-04-04,153.8,155.0,152.7,154.5,1050000
2024-04-05,154.5,156.3,153.5,155.6,980000
2024-04-06,155.6,157.4,154.3,156.9,1020000
2024-04-07,156.9,158.6,156.0,158.1,1010000
2024-04-08,158.1,159.9,157.1,158.7,970000
2024-04-09,158.7,160.0,157.9,159.5,950000
2024-04-10,159.5,161.0,158.8,160.2,930000"""

with open("Sample_Stock.csv", "w") as f:
    f.write(data)

df = pd.read_csv("Sample_Stock.csv")
df['Date'] = pd.to_datetime(df['Date'])
df.set_index('Date', inplace=True)

scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df[['Close']])

def create_sequences(data, step=3):
    X, y = [], []
    for i in range(step, len(data)):
        X.append(data[i-step:i, 0])
        y.append(data[i, 0])
    return np.array(X), np.array(y)

X, y = create_sequences(scaled_data)
X = X.reshape((X.shape[0], X.shape[1], 1))

split = int(len(X) * 0.8)
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)),
    Dropout(0.2),
    LSTM(50),
    Dropout(0.2),
    Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, epochs=50, batch_size=1, verbose=0)

pred = model.predict(X_test)
pred = scaler.inverse_transform(pred)
actual = scaler.inverse_transform(y_test.reshape(-1, 1))

print("MSE:", mean_squared_error(actual, pred))
print("MAE:", mean_absolute_error(actual, pred))
print("R2 Score:", r2_score(actual, pred))

plt.figure(figsize=(10, 5))
plt.plot(actual, label='Actual')
plt.plot(pred, label='Predicted')
plt.title('Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Price')
plt.legend()
plt.grid(True)
plt.show()

